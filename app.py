# ==========================================================
# H-DATA ‚Äì AI Data Doctor
# D√©velopp√© par HAMDINOU Moulaye Driss ¬© 2025
# ==========================================================

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
from datetime import datetime
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
)
from reportlab.lib.styles import getSampleStyleSheet
import os

# ==========================================================
# CONFIGURATION
# ==========================================================
st.set_page_config(page_title="H-DATA ‚Äì AI Data Doctor", page_icon="üß†", layout="wide")

st.markdown("""
<style>
h1, h2, h3, h4 {color:#00C853;}
.reportview-container {
    background-color: #0d1117;
    color: #e0e0e0;
}
.sidebar .sidebar-content {
    background-color: #111827;
}
</style>
""", unsafe_allow_html=True)

if os.path.exists("hdata_logo.png"):
    st.image("hdata_logo.png", width=180)

st.title("üß† H-DATA ‚Äì AI Data Doctor")
st.markdown("_Analyse. Corrige. Visualise._")
st.markdown("**D√©velopp√© par HAMDINOU Moulaye Driss ¬© 2025**")

# ==========================================================
# UPLOAD DES DONN√âES
# ==========================================================
st.header("üìÇ Importation des donn√©es")

uploaded_file = st.file_uploader("Importez un fichier CSV ou Excel :", type=["csv", "xlsx"])

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        st.success(f"‚úÖ Fichier charg√© avec succ√®s : {uploaded_file.name}")
        st.dataframe(df.head())
    except Exception as e:
        st.error(f"Erreur lors du chargement du fichier : {e}")
        st.stop()

    # ==========================================================
    # DIAGNOSTIC IA AUTOMATIQUE
    # ==========================================================
    st.header("ü§ñ Diagnostic intelligent des donn√©es")

    def analyse_data(df):
        diag = []
        for col in df.columns:
            if df[col].isnull().sum() > 0:
                diag.append((col, "Valeurs manquantes", df[col].isnull().sum(), "Remplacer par moyenne/m√©diane"))
            if df[col].dtype in [np.float64, np.int64]:
                outliers = ((df[col] - df[col].mean()).abs() > 3 * df[col].std()).sum()
                if outliers > 0:
                    diag.append((col, "Valeurs aberrantes", outliers, "Remplacer par m√©diane"))
            if df[col].duplicated().any():
                diag.append((col, "Doublons", df[col].duplicated().sum(), "Supprimer doublons"))
        return pd.DataFrame(diag, columns=["Colonne", "Probl√®me", "Nb Occurrences", "Proposition IA"])

    diag_df = analyse_data(df)
    st.dataframe(diag_df)

    # ==========================================================
    # CORRECTION AUTOMATIQUE
    # ==========================================================
    st.header("üßπ Application des corrections IA")

    if st.checkbox("‚úÖ Appliquer automatiquement les corrections sugg√©r√©es"):
        for _, row in diag_df.iterrows():
            col = row["Colonne"]
            if "manquantes" in row["Probl√®me"]:
                if df[col].dtype in [np.float64, np.int64]:
                    df[col].fillna(df[col].median(), inplace=True)
            if "aberrantes" in row["Probl√®me"]:
                mean, std = df[col].mean(), df[col].std()
                df[col] = np.where((df[col] - mean).abs() > 3*std, df[col].median(), df[col])
            if "Doublons" in row["Probl√®me"]:
                df.drop_duplicates(subset=[col], inplace=True)
        st.success("‚úÖ Corrections appliqu√©es automatiquement avec succ√®s.")
        st.dataframe(df.head())

    # ==========================================================
    # VISUALISATIONS RAPIDES
    # ==========================================================
    st.header("üìä Visualisations rapides")

    col_choice = st.selectbox("Choisir une colonne num√©rique :", df.select_dtypes(include=np.number).columns)
    if col_choice:
        fig, ax = plt.subplots(figsize=(6, 3))
        sns.histplot(df[col_choice], bins=30, kde=True, ax=ax, color="#0078D7")
        ax.set_title(f"Distribution de {col_choice}")
        st.pyplot(fig)

        corr = df.select_dtypes(include=np.number).corr()
        fig2, ax2 = plt.subplots(figsize=(6, 4))
        sns.heatmap(corr, cmap="Blues", ax=ax2)
        ax2.set_title("Heatmap de corr√©lation")
        st.pyplot(fig2)

    # ==========================================================
    # EXPORT CSV
    # ==========================================================
    st.header("üíæ Export des donn√©es nettoy√©es")
    os.makedirs("outputs", exist_ok=True)
    cleaned_path = f"outputs/data_cleaned_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    df.to_csv(cleaned_path, index=False)
    st.success(f"‚úÖ Donn√©es sauvegard√©es : {cleaned_path}")

    # ==========================================================
    # G√âN√âRATION DU RAPPORT PDF
    # ==========================================================
    st.header("üìÑ G√©n√©ration du rapport PDF")

    sections = st.multiselect(
        "Choisissez les sections √† inclure dans le rapport :",
        ["R√©sum√© g√©n√©ral", "Diagnostic IA", "Propositions de correction", "Graphiques"],
        default=["R√©sum√© g√©n√©ral", "Diagnostic IA"]
    )

    if st.button("üìÑ G√©n√©rer le rapport PDF"):
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []

        if os.path.exists("hdata_logo.png"):
            story.append(Image("hdata_logo.png", width=160, height=60))
        story.append(Spacer(1, 20))
        story.append(Paragraph("<b>H-DATA ‚Äì Rapport d‚Äôanalyse des donn√©es</b>", styles["Title"]))
        story.append(Spacer(1, 10))
        story.append(Paragraph(f"Fichier : {uploaded_file.name}", styles["Normal"]))
        story.append(Paragraph(f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles["Normal"]))
        story.append(Paragraph("Analyste : HAMDINOU Moulaye Driss", styles["Normal"]))
        story.append(Spacer(1, 20))

        if "R√©sum√© g√©n√©ral" in sections:
            story.append(Paragraph("<b>R√©sum√© g√©n√©ral :</b>", styles["Heading2"]))
            story.append(Paragraph(f"Nombre de lignes : {len(df)}", styles["Normal"]))
            story.append(Paragraph(f"Nombre de colonnes : {len(df.columns)}", styles["Normal"]))
            story.append(Spacer(1, 10))

        if "Diagnostic IA" in sections:
            story.append(Paragraph("<b>Diagnostic IA :</b>", styles["Heading2"]))
            table_data = [diag_df.columns.tolist()] + diag_df.values.tolist()
            table = Table(table_data)
            table.setStyle(TableStyle([
                ("GRID", (0, 0), (-1, -1), 1, colors.black),
                ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#0078D7")),
                ("TEXTCOLOR", (0, 0), (-1, 0), colors.white)
            ]))
            story.append(table)
            story.append(Spacer(1, 10))

        story.append(Spacer(1, 20))
        story.append(Paragraph("<b>H-DATA ¬© 2025 ‚Äì D√©velopp√© par HAMDINOU Moulaye Driss</b>", styles["Italic"]))
        doc.build(story)
        buffer.seek(0)

        pdf_bytes = buffer.getvalue()
        st.download_button(
            label="üì• T√©l√©charger le rapport PDF",
            data=pdf_bytes,
            file_name="rapport_hdata.pdf",
            mime="application/pdf"
        )
        st.success("‚úÖ Rapport PDF g√©n√©r√© avec succ√®s.")

    # ==========================================================
    # LIEN VERS GRAFANA
    # ==========================================================
    st.markdown("---")
    st.subheader("üåê Visualisation externe")
    st.markdown("[Ouvrir les donn√©es dans Grafana](http://localhost:3000/)", unsafe_allow_html=True)
